{"version":3,"file":"validators.min.js","sources":["../src/Utils.js","../src/cl.js","../src/string.js"],"sourcesContent":["export const mod11Verifier = value => {\n  const number = value.replace(/\\D/g, '');\n\n  const reversedStringArray = Array.from(number.toString()).reverse();\n  const sum = reversedStringArray.reduce((memo, digit, index) => {\n    const factor = (index % 6) + 2;\n    return memo + (parseInt(digit, 10) * factor);\n  }, 0);\n\n  const mod11 = 11 - (sum % 11);\n  let verifier = mod11;\n  if (mod11 === 11) verifier = 0;\n  if (mod11 === 10) verifier = 'k';\n  return verifier.toString();\n};\n\nexport const cleanString = string => string.replace(/\\W/g, '');\n","import { mod11Verifier, cleanString } from './Utils';\n\nexport const nationalId = id => {\n  if (typeof id !== 'string') return false;\n\n  const [number, verifier] = id.split(/\\s*-\\s*/);\n  return verifier === mod11Verifier(number);\n};\n\nexport const phone = number => {\n  const oldFormatRegions = /^\\d{2}-?\\d{7}$/;\n  const oldFormatMetropolitan = /^\\d-?\\d{8}$/;\n  const newFormat = /^\\d{9}$/;\n  return oldFormatRegions.test(number)\n    || oldFormatMetropolitan.test(number)\n    || newFormat.test(number);\n};\n\nexport const plate = plateNumber => {\n  const cleanedPlate = cleanString(plateNumber);\n  if (cleanedPlate.length !== 6) return false;\n  const oldFormat = /[a-zA-Z]{2}-?\\d{4}/;\n  const currentFormat = /[BCDFGHJKLPRSTVWXYZ]{4}-?\\d{2}$/;\n  return oldFormat.test(plateNumber) || currentFormat.test(plateNumber);\n};\n","const luhn = require('fast-luhn');\n\nconst emailRegexp = /^.+@.+\\..+$/i;\nconst passwordRegexp = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d.]{8,}$/i;\n\nexport const fullName = name => {\n  if (typeof name !== 'string') return false;\n  return name.split(/\\s+/).length > 1;\n};\n\nexport const email = address => emailRegexp.test(address);\n\nexport const password = p => passwordRegexp.test(p);\n\nexport const creditCard = number => (\n  (number.length > 11 && number.length < 20) && luhn(number)\n);\n"],"names":["mod11Verifier","number","value","replace","reversedStringArray","Array","from","toString","reverse","sum","reduce","memo","digit","index","factor","parseInt","mod11","verifier","cleanString","string","nationalId","id","split","phone","oldFormatRegions","oldFormatMetropolitan","newFormat","test","plate","cleanedPlate","plateNumber","length","oldFormat","currentFormat","luhn","require","emailRegexp","passwordRegexp","fullName","name","email","address","password","p","creditCard"],"mappings":"0MAAO,IAAMA,GAAgB,eACrBC,GAASC,EAAMC,QAAQ,MAAO,IAE9BC,EAAsBC,MAAMC,KAAKL,EAAOM,YAAYC,UACpDC,EAAML,EAAoBM,OAAO,SAACC,EAAMC,EAAOC,MAC7CC,GAAUD,EAAQ,EAAK,QACtBF,GAAQI,SAASH,EAAO,IAAME,GACpC,GAEGE,EAAQ,GAAMP,EAAM,GACtBQ,EAAWD,QACD,MAAVA,IAAcC,EAAW,GACf,KAAVD,IAAcC,EAAW,KACtBA,EAASV,YAGLW,EAAc,kBAAUC,GAAOhB,QAAQ,MAAO,2aCd9CiB,EAAa,eACN,gBAAPC,GAAiB,OAAO,QAERA,EAAGC,MAAM,oBAA7BrB,OAAQgB,aACRA,KAAajB,EAAcC,IAGvBsB,EAAQ,eACbC,GAAmB,iBACnBC,EAAwB,cACxBC,EAAY,gBACXF,GAAiBG,KAAK1B,IACxBwB,EAAsBE,KAAK1B,IAC3ByB,EAAUC,KAAK1B,IAGT2B,EAAQ,eACbC,GAAeX,EAAYY,MACL,IAAxBD,EAAaE,OAAc,OAAO,KAChCC,GAAY,qBACZC,EAAgB,wCACfD,GAAUL,KAAKG,IAAgBG,EAAcN,KAAKG,oDCvBrDI,EAAOC,QAAQ,aAEfC,EAAc,eACdC,EAAiB,2CAEVC,EAAW,kBACF,gBAATC,IACJA,EAAKjB,MAAM,OAAOS,OAAS,GAGvBS,EAAQ,kBAAWJ,GAAYT,KAAKc,IAEpCC,EAAW,kBAAKL,GAAeV,KAAKgB,IAEpCC,EAAa,kBACvB3C,GAAO8B,OAAS,IAAM9B,EAAO8B,OAAS,IAAOG,EAAKjC"}