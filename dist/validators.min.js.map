{"version":3,"file":"validators.min.js","sources":["../src/br.js","../src/utils.js","../src/cl.js","../src/string.js","../node_modules/fast-luhn/index.js","../src/credit-card.js"],"sourcesContent":["// eslint-disable-next-line import/prefer-default-export\nexport const BLACKLIST = [\n  '00000000000',\n  '11111111111',\n  '22222222222',\n  '33333333333',\n  '44444444444',\n  '55555555555',\n  '66666666666',\n  '77777777777',\n  '88888888888',\n  '99999999999'\n];\n\nexport const cpf = value => {\n  if (!value || BLACKLIST.indexOf(value) > -1) {\n    return false;\n  }\n  value = value.replace(/[^\\d]+/g, '');\n  function validateDigit(digit) {\n    const init = digit - 9;\n    let add = 0;\n    for (let i = 0; i < 9; i += 1) {\n      add += parseInt(value.charAt(i + init), 10) * (i + 1);\n    }\n    return (add % 11) % 10 === parseInt(value.charAt(digit), 10);\n  }\n  return validateDigit(9) && validateDigit(10);\n};\n","export const mod11Verifier = value => {\n  const number = value.replace(/\\D/g, '');\n\n  const reversedStringArray = Array.from(number.toString()).reverse();\n  const sum = reversedStringArray.reduce((memo, digit, index) => {\n    const factor = (index % 6) + 2;\n    return memo + (parseInt(digit, 10) * factor);\n  }, 0);\n\n  const mod11 = 11 - (sum % 11);\n  let verifier = mod11;\n  if (mod11 === 11) verifier = 0;\n  if (mod11 === 10) verifier = 'k';\n  return verifier.toString();\n};\n\nexport const cleanString = string => string.replace(/\\W/g, '');\n\nexport const between = (x, min, max) => x >= min && x <= max;\n\nexport const repeat = (r, a) => Array(r + 1).join(a);\n\nexport const range = r => [...Array(r)].map((x, i) => i);\n","import { mod11Verifier, cleanString, between, range, repeat } from './utils';\n\nconst NATIONAL_ID_SPLIT_REGEX = /\\s*-\\s*/;\nconst NATIONAL_ID_MIN_LENGTH = 7;\nconst NATIONAL_ID_MAX_LENGTH = 8;\nconst NATIONAL_ID_REPEAT_DIGITS = 10;\nconst COMPANIES_NATIONAL_ID_MIN = 50000000;\nconst COMPANIES_NATIONAL_ID_MAX = 99999999;\n\nconst NATIONAL_ID_BLACKLIST = [\n  NATIONAL_ID_MIN_LENGTH,\n  NATIONAL_ID_MAX_LENGTH\n].reduce(\n  (list, length) =>\n    list.concat(range(NATIONAL_ID_REPEAT_DIGITS).map(n => repeat(length, n))),\n  []\n);\n\nconst splitNationalId = id => id.split(NATIONAL_ID_SPLIT_REGEX);\n\nexport const nationalIdLength = id =>\n  between(\n    id.replace(/\\D/g, '').length,\n    NATIONAL_ID_MIN_LENGTH,\n    NATIONAL_ID_MAX_LENGTH\n  );\n\nexport const nationalId = id => {\n  if (typeof id !== 'string') return false;\n\n  const [number, verifier] = splitNationalId(id);\n  return nationalIdLength(number) && verifier === mod11Verifier(number);\n};\n\nexport const isNationalIdInBlacklist = (id, list = [], useDefault = true) => {\n  const [number] = splitNationalId(id);\n  const blacklist = useDefault ? list.concat(NATIONAL_ID_BLACKLIST) : list;\n  return blacklist.indexOf(number) !== -1;\n};\n\nexport const isCompanyNationalId = id => {\n  if (typeof id !== 'string') return false;\n  const [number] = splitNationalId(id);\n\n  return between(number, COMPANIES_NATIONAL_ID_MIN, COMPANIES_NATIONAL_ID_MAX);\n};\n\nexport const phone = number => {\n  const oldFormatRegions = /^\\d{2}-?\\d{7}$/;\n  const oldFormatMetropolitan = /^\\d-?\\d{8}$/;\n  const newFormat = /^\\d{9}$/;\n  return (\n    oldFormatRegions.test(number) ||\n    oldFormatMetropolitan.test(number) ||\n    newFormat.test(number)\n  );\n};\n\nexport const plate = plateNumber => {\n  const cleanedPlate = cleanString(plateNumber);\n  if (cleanedPlate.length !== 6) return false;\n  const oldFormat = /[a-zA-Z]{2}-?\\d{4}/;\n  const currentFormat = /[BCDFGHJKLPRSTVWXYZ]{4}-?\\d{2}$/;\n  return oldFormat.test(plateNumber) || currentFormat.test(plateNumber);\n};\n","const emailRegexp = /^\\S+@\\S+\\.\\S+$/i;\nconst passwordRegexp = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d.]{8,}$/i;\n\nexport const fullName = name => {\n  if (typeof name !== 'string') return false;\n  return name.split(/\\s+/).length > 1;\n};\n\nexport const email = address => emailRegexp.test(address);\n\nexport const password = p => passwordRegexp.test(p);\n","'use strict'\n\nmodule.exports = (function (array) {\n  return function luhn (number) {\n    if (typeof number !== 'string') throw new TypeError('Expected string input')\n    if (!number) return false\n    var length = number.length\n    var bit = 1\n    var sum = 0\n    var value\n\n    while (length) {\n      value = parseInt(number.charAt(--length), 10)\n      sum += (bit ^= 1) ? array[value] : value\n    }\n\n    return !!sum && sum % 10 === 0\n  }\n}([0, 2, 4, 6, 8, 1, 3, 5, 7, 9]))\n","import luhn from 'fast-luhn';\n\nconst VISA = 'Visa';\nconst MASTERCARD = 'Mastercard';\nconst AMERICAN_EXPRESS = 'American Express';\nconst DINERS_CLUB = 'Diners Club';\nconst HIPERCARD = 'Hipercard';\nconst ELO = 'Elo';\n\nconst creditCardRegexp = {\n  [AMERICAN_EXPRESS]: /^3[47][0-9]{13}$/,\n  [DINERS_CLUB]: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,\n  [MASTERCARD]: /^5[1-5][0-9]{14}$/,\n  [VISA]: /^4[0-9]{12}(?:[0-9]{3})?$/,\n  [HIPERCARD]: /^((606282|637095|637568)[0-9]{10}|38[0-9]{14,17})$/,\n  [ELO]: /^((50670[7-8])|(506715)|(50671[7-9])|(50672[0-1])|(50672[4-9])|(50673[0-3])|(506739)|(50674[0-8])|(50675[0-3])|(50677[4-8])|(50900[0-9])|(50901[3-9])|(50902[0-9])|(50903[1-9])|(50904[0-9])|(50905[0-9])|(50906[0-4])|(50906[6-9])|(50907[0-2])|(50907[4-5])|(636368)|(636297)|(504175)|(438935)|(40117[8-9])|(45763[1-2])|(457393)|(431274)|(50907[6-9])|(50908[0-9])|(627780))/\n};\n\nexport const isAmericanExpress = number =>\n  creditCardRegexp[AMERICAN_EXPRESS].test(number);\nexport const isDinersClub = number =>\n  creditCardRegexp[DINERS_CLUB].test(number);\nexport const isMastercard = number => creditCardRegexp[MASTERCARD].test(number);\nexport const isVisa = number => creditCardRegexp[VISA].test(number);\nexport const isHipercard = number => creditCardRegexp[HIPERCARD].test(number);\nexport const isElo = number => creditCardRegexp[ELO].test(number);\n\nconst creditCardValidation = {\n  [VISA]: isVisa,\n  [MASTERCARD]: isMastercard,\n  [AMERICAN_EXPRESS]: isAmericanExpress,\n  [DINERS_CLUB]: isDinersClub,\n  [HIPERCARD]: isHipercard,\n  [ELO]: isElo\n};\n\nexport const creditCard = number =>\n  number.length > 11 && number.length < 20 && luhn(number);\n\nexport const creditCardByName = name => number =>\n  [creditCard, creditCardValidation[name]].every(validation =>\n    validation(number)\n  );\n"],"names":["BLACKLIST","cpf","validateDigit","digit","init","add","i","parseInt","value","charAt","indexOf","replace","mod11Verifier","number","reversedStringArray","Array","from","toString","reverse","sum","reduce","memo","index","factor","mod11","verifier","cleanString","string","between","x","min","max","repeat","r","a","join","range","map","NATIONAL_ID_SPLIT_REGEX","NATIONAL_ID_BLACKLIST","list","length","concat","n","splitNationalId","id","split","nationalIdLength","nationalId","isNationalIdInBlacklist","useDefault","isCompanyNationalId","phone","oldFormatRegions","oldFormatMetropolitan","newFormat","test","plate","plateNumber","oldFormat","currentFormat","emailRegexp","passwordRegexp","fullName","name","email","address","password","p","array","TypeError","bit","creditCardRegexp","isAmericanExpress","isDinersClub","isMastercard","isVisa","isHipercard","isElo","creditCardValidation","creditCard","luhn","creditCardByName","every","validation"],"mappings":"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"}