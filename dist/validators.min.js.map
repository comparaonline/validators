{"version":3,"file":"validators.min.js","sources":["../src/utils.js","../src/cl.js","../src/string.js","../node_modules/fast-luhn/index.js","../src/credit-card.js"],"sourcesContent":["export const mod11Verifier = value => {\n  const number = value.replace(/\\D/g, '');\n\n  const reversedStringArray = Array.from(number.toString()).reverse();\n  const sum = reversedStringArray.reduce((memo, digit, index) => {\n    const factor = (index % 6) + 2;\n    return memo + (parseInt(digit, 10) * factor);\n  }, 0);\n\n  const mod11 = 11 - (sum % 11);\n  let verifier = mod11;\n  if (mod11 === 11) verifier = 0;\n  if (mod11 === 10) verifier = 'k';\n  return verifier.toString();\n};\n\nexport const cleanString = string => string.replace(/\\W/g, '');\n\nexport const between = (x, min, max) => x >= min && x <= max;\n","import { mod11Verifier, cleanString, between } from './utils';\n\nconst NATIONAL_ID_MIN_LENGTH = 7;\nconst NATIONAL_ID_MAX_LENGTH = 8;\n\nexport const nationalIdLength = id => (\n  between(id.replace(/\\D/g, '').length, NATIONAL_ID_MIN_LENGTH, NATIONAL_ID_MAX_LENGTH)\n);\n\nexport const nationalId = id => {\n  if (typeof id !== 'string') return false;\n\n  const [number, verifier] = id.split(/\\s*-\\s*/);\n  return (nationalIdLength(number)) && verifier === mod11Verifier(number);\n};\n\nexport const phone = number => {\n  const oldFormatRegions = /^\\d{2}-?\\d{7}$/;\n  const oldFormatMetropolitan = /^\\d-?\\d{8}$/;\n  const newFormat = /^\\d{9}$/;\n  return oldFormatRegions.test(number)\n    || oldFormatMetropolitan.test(number)\n    || newFormat.test(number);\n};\n\nexport const plate = plateNumber => {\n  const cleanedPlate = cleanString(plateNumber);\n  if (cleanedPlate.length !== 6) return false;\n  const oldFormat = /[a-zA-Z]{2}-?\\d{4}/;\n  const currentFormat = /[BCDFGHJKLPRSTVWXYZ]{4}-?\\d{2}$/;\n  return oldFormat.test(plateNumber) || currentFormat.test(plateNumber);\n};\n","const emailRegexp = /^.+@.+\\..+$/i;\nconst passwordRegexp = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d.]{8,}$/i;\n\nexport const fullName = name => {\n  if (typeof name !== 'string') return false;\n  return name.split(/\\s+/).length > 1;\n};\n\nexport const email = address => emailRegexp.test(address);\n\nexport const password = p => passwordRegexp.test(p);\n","'use strict'\n\nmodule.exports = (function (array) {\n  return function luhn (number) {\n    if (typeof number !== 'string') throw new TypeError('Expected string input')\n    if (!number) return false\n    var length = number.length\n    var bit = 1\n    var sum = 0\n    var value\n\n    while (length) {\n      value = parseInt(number.charAt(--length), 10)\n      sum += (bit ^= 1) ? array[value] : value\n    }\n\n    return !!sum && sum % 10 === 0\n  }\n}([0, 2, 4, 6, 8, 1, 3, 5, 7, 9]))\n","import luhn from 'fast-luhn';\n\nconst VISA = 'Visa';\nconst MASTERCARD = 'Mastercard';\nconst AMERICAN_EXPRESS = 'American Express';\nconst DINERS_CLUB = 'Diners Club';\n\nconst creditCardRegexp = {\n  [AMERICAN_EXPRESS]: /^3[47][0-9]{13}$/,\n  [DINERS_CLUB]: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,\n  [MASTERCARD]: /^5[1-5][0-9]{14}$/,\n  [VISA]: /^4[0-9]{12}(?:[0-9]{3})?$/\n};\n\nexport const isAmericanExpress = number => creditCardRegexp[AMERICAN_EXPRESS].test(number);\nexport const isDinersClub = number => creditCardRegexp[DINERS_CLUB].test(number);\nexport const isMastercard = number => creditCardRegexp[MASTERCARD].test(number);\nexport const isVisa = number => creditCardRegexp[VISA].test(number);\n\nexport const creditCard = number => (number.length > 11 && number.length < 20) && luhn(number);\n"],"names":["mod11Verifier","number","value","replace","reversedStringArray","Array","from","toString","reverse","sum","reduce","memo","digit","index","factor","parseInt","mod11","verifier","cleanString","string","between","x","min","max","NATIONAL_ID_MIN_LENGTH","NATIONAL_ID_MAX_LENGTH","nationalIdLength","id","length","nationalId","split","phone","oldFormatRegions","oldFormatMetropolitan","newFormat","test","plate","cleanedPlate","plateNumber","oldFormat","currentFormat","emailRegexp","passwordRegexp","fullName","name","email","address","password","p","array","TypeError","bit","charAt","VISA","MASTERCARD","AMERICAN_EXPRESS","DINERS_CLUB","creditCardRegexp","isAmericanExpress","isDinersClub","isMastercard","isVisa","creditCard","luhn"],"mappings":"8SAAO,MAAMA,EAAgB,eACrBC,GAASC,EAAMC,QAAQ,MAAO,IAE9BC,EAAsBC,MAAMC,KAAKL,EAAOM,YAAYC,UACpDC,EAAML,EAAoBM,OAAO,SAACC,EAAMC,EAAOC,MAC7CC,GAAUD,EAAQ,EAAK,QACtBF,GAAQI,SAASH,EAAO,IAAME,GACpC,GAEGE,EAAQ,GAAMP,EAAM,GACtBQ,EAAWD,QACD,MAAVA,IAAcC,EAAW,GACf,KAAVD,IAAcC,EAAW,KACtBA,EAASV,YAGLW,EAAc,kBAAUC,GAAOhB,QAAQ,MAAO,KAE9CiB,EAAU,SAACC,EAAGC,EAAKC,SAAQF,IAAKC,GAAOD,GAAKE,yaChBnDC,EAAyB,EACzBC,EAAyB,EAElBC,EAAmB,kBAC9BN,GAAQO,EAAGxB,QAAQ,MAAO,IAAIyB,OAAQJ,EAAwBC,IAGnDI,EAAa,eACN,gBAAPF,GAAiB,OAAO,QAERA,EAAGG,MAAM,oBAA7B7B,OAAQgB,aACPS,GAAiBzB,IAAYgB,IAAajB,EAAcC,IAGrD8B,EAAQ,eACbC,GAAmB,iBACnBC,EAAwB,cACxBC,EAAY,gBACXF,GAAiBG,KAAKlC,IACxBgC,EAAsBE,KAAKlC,IAC3BiC,EAAUC,KAAKlC,IAGTmC,EAAQ,eACbC,GAAenB,EAAYoB,MACL,IAAxBD,EAAaT,OAAc,OAAO,KAChCW,GAAY,qBACZC,EAAgB,wCACfD,GAAUJ,KAAKG,IAAgBE,EAAcL,KAAKG,uEC9BrDG,EAAc,eACdC,EAAiB,2CAEVC,EAAW,kBACF,gBAATC,IACJA,EAAKd,MAAM,OAAOF,OAAS,GAGvBiB,EAAQ,kBAAWJ,GAAYN,KAAKW,IAEpCC,EAAW,kBAAKL,GAAeP,KAAKa,uDCR/B,SAAUC,GAC1B,MAAO,UAAehD,GACpB,GAAsB,gBAAXA,GAAqB,KAAM,IAAIiD,WAAU,wBACpD,KAAKjD,EAAQ,OAAO,CAMpB,KALA,GAGIC,GAHA0B,EAAS3B,EAAO2B,OAChBuB,EAAM,EACN1C,EAAM,EAGHmB,GACL1B,EAAQa,SAASd,EAAOmD,SAASxB,GAAS,IAC1CnB,IAAQ0C,GAAO,GAAKF,EAAM/C,GAASA,CAGrC,SAASO,GAAOA,EAAM,KAAO,KAE9B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IChBxB4C,EAAO,OACPC,EAAa,aACbC,EAAmB,mBACnBC,EAAc,cAEdC,YACHF,EAAmB,wBACnBC,EAAc,wCACdF,EAAa,yBACbD,EAAO,gCAGGK,EAAoB,kBAAUD,GAAiBF,GAAkBpB,KAAKlC,IACtE0D,EAAe,kBAAUF,GAAiBD,GAAarB,KAAKlC,IAC5D2D,EAAe,kBAAUH,GAAiBH,GAAYnB,KAAKlC,IAC3D4D,EAAS,kBAAUJ,GAAiBJ,GAAMlB,KAAKlC,IAE/C6D,EAAa,kBAAW7D,GAAO2B,OAAS,IAAM3B,EAAO2B,OAAS,IAAOmC,EAAK9D"}